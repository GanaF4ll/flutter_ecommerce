#!/bin/bash

# Script de d√©ploiement Blue-Green manuel
# Utilisation: ./deploy-blue-green.sh [deploy|switch|rollback|status]

set -e

FIREBASE_PROJECT="flutterecommerce-fc124"
PRODUCTION_URL="https://flutterecommerce-fc124.firebaseapp.com"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BUILD_VERSION="manual-$TIMESTAMP"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

show_help() {
    echo "üöÄ D√©ploiement Blue-Green Firebase"
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  deploy    D√©ployer sur l'environnement staging (GREEN)"
    echo "  test      Tester l'environnement staging"
    echo "  switch    Basculer staging vers production (BLUE)"
    echo "  rollback  Revenir √† la version pr√©c√©dente"
    echo "  status    Afficher le statut des environnements"
    echo "  cleanup   Nettoyer les anciens d√©ploiements"
    echo ""
}

check_dependencies() {
    echo -e "${BLUE}üîç V√©rification des d√©pendances...${NC}"
    
    if ! command -v firebase &> /dev/null; then
        echo -e "${RED}‚ùå Firebase CLI non install√©${NC}"
        echo "Installer avec: npm install -g firebase-tools"
        exit 1
    fi
    
    if ! command -v flutter &> /dev/null; then
        echo -e "${RED}‚ùå Flutter non install√©${NC}"
        exit 1
    fi
    
    if ! firebase projects:list | grep -q "$FIREBASE_PROJECT"; then
        echo -e "${RED}‚ùå Projet Firebase non accessible${NC}"
        echo "Se connecter avec: firebase login"
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Toutes les d√©pendances sont pr√©sentes${NC}"
}

build_app() {
    echo -e "${BLUE}üèóÔ∏è Build de l'application...${NC}"
    
    flutter pub get
    flutter test test/load_testing/
    flutter build web --release --build-name="$BUILD_VERSION"
    
    echo -e "${GREEN}‚úÖ Build termin√©: $BUILD_VERSION${NC}"
}

deploy_staging() {
    echo -e "${BLUE}üü¢ D√©ploiement sur STAGING (GREEN)...${NC}"
    
    build_app
    
    # D√©ployer sur un canal preview
    CHANNEL_ID="green-$BUILD_VERSION"
    firebase hosting:channel:deploy "$CHANNEL_ID" --project "$FIREBASE_PROJECT" --expires 7d
    
    # R√©cup√©rer l'URL du canal
    STAGING_URL=$(firebase hosting:channel:list --project "$FIREBASE_PROJECT" --json | jq -r ".channels[] | select(.name == \"$CHANNEL_ID\") | .url")
    
    echo -e "${GREEN}‚úÖ Staging d√©ploy√© sur: $STAGING_URL${NC}"
    echo "$STAGING_URL" > .staging-url
    echo "$BUILD_VERSION" > .build-version
    
    echo -e "${YELLOW}üß™ Lancer les tests avec: $0 test${NC}"
}

test_staging() {
    echo -e "${BLUE}üß™ Tests de l'environnement staging...${NC}"
    
    if [ ! -f ".staging-url" ]; then
        echo -e "${RED}‚ùå Aucun environnement staging trouv√©${NC}"
        echo "D√©ployer d'abord avec: $0 deploy"
        exit 1
    fi
    
    STAGING_URL=$(cat .staging-url)
    echo -e "${BLUE}Testing: $STAGING_URL${NC}"
    
    # Tests de base
    echo "üîç Test de connectivit√©..."
    if curl -f --max-time 10 "$STAGING_URL" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Staging accessible${NC}"
    else
        echo -e "${RED}‚ùå Staging inaccessible${NC}"
        exit 1
    fi
    
    # Tests de performance
    cd load-testing
    mkdir -p reports
    
    echo "üìä Tests de performance..."
    if command -v artillery &> /dev/null; then
        # Cr√©er un fichier de test temporaire pour staging
        sed "s|https://flutterecommerce-fc124.firebaseapp.com|$STAGING_URL|g" artillery-web-load-test.yml > artillery-staging.yml
        artillery run artillery-staging.yml --output reports/staging-test.json
        
        # Analyser les r√©sultats
        if [ -f "reports/staging-test.json" ]; then
            echo -e "${GREEN}‚úÖ Tests de performance termin√©s${NC}"
            echo "üìä Rapport: load-testing/reports/staging-test.json"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è Artillery non install√©, tests basiques seulement${NC}"
    fi
    
    cd ..
    
    # Tests Flutter
    export TEST_TARGET_URL="$STAGING_URL"
    flutter test test/load_testing/simple_performance_test.dart
    
    echo -e "${GREEN}‚úÖ Tests termin√©s avec succ√®s${NC}"
    echo -e "${YELLOW}üîÑ Basculer vers production avec: $0 switch${NC}"
}

switch_to_production() {
    echo -e "${BLUE}üîÑ Basculement vers PRODUCTION (BLUE)...${NC}"
    
    if [ ! -f ".staging-url" ] || [ ! -f ".build-version" ]; then
        echo -e "${RED}‚ùå Pas d'environnement staging pr√™t${NC}"
        exit 1
    fi
    
    BUILD_VERSION=$(cat .build-version)
    
    # Sauvegarder la production actuelle
    echo "üíæ Sauvegarde de la production actuelle..."
    BACKUP_CHANNEL="backup-$TIMESTAMP"
    firebase hosting:clone --source-channel=live --target-channel="$BACKUP_CHANNEL" --project "$FIREBASE_PROJECT" || true
    
    # D√©ployer en production
    echo "üöÄ D√©ploiement en production..."
    firebase deploy --only hosting --project "$FIREBASE_PROJECT"
    
    # V√©rifier la production
    sleep 10
    if curl -f --max-time 10 "$PRODUCTION_URL" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Production mise √† jour avec succ√®s${NC}"
        echo -e "${GREEN}üåê URL: $PRODUCTION_URL${NC}"
        
        # Sauvegarder les informations de d√©ploiement
        echo "{
            \"version\": \"$BUILD_VERSION\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"backup_channel\": \"$BACKUP_CHANNEL\",
            \"production_url\": \"$PRODUCTION_URL\"
        }" > .production-deployment.json
        
        echo -e "${BLUE}üìã Informations sauvegard√©es dans .production-deployment.json${NC}"
    else
        echo -e "${RED}‚ùå Probl√®me de d√©ploiement production${NC}"
        echo "üîô Rollback recommand√©"
        exit 1
    fi
    
    # Nettoyer
    cleanup_staging
}

rollback() {
    echo -e "${YELLOW}üîô Rollback en cours...${NC}"
    
    if [ ! -f ".production-deployment.json" ]; then
        echo -e "${RED}‚ùå Aucune information de d√©ploiement trouv√©e${NC}"
        exit 1
    fi
    
    BACKUP_CHANNEL=$(jq -r '.backup_channel' .production-deployment.json)
    
    if [ "$BACKUP_CHANNEL" != "null" ]; then
        echo "üîÑ Restauration depuis: $BACKUP_CHANNEL"
        firebase hosting:clone --source-channel="$BACKUP_CHANNEL" --target-channel=live --project "$FIREBASE_PROJECT"
        
        echo -e "${GREEN}‚úÖ Rollback termin√©${NC}"
    else
        echo -e "${RED}‚ùå Pas de sauvegarde disponible${NC}"
    fi
}

show_status() {
    echo -e "${BLUE}üìä Statut des environnements${NC}"
    echo ""
    
    echo "üåê PRODUCTION:"
    echo "   URL: $PRODUCTION_URL"
    if curl -f --max-time 5 "$PRODUCTION_URL" > /dev/null 2>&1; then
        echo -e "   Status: ${GREEN}‚úÖ Accessible${NC}"
    else
        echo -e "   Status: ${RED}‚ùå Inaccessible${NC}"
    fi
    
    echo ""
    echo "üü¢ STAGING:"
    if [ -f ".staging-url" ]; then
        STAGING_URL=$(cat .staging-url)
        echo "   URL: $STAGING_URL"
        if curl -f --max-time 5 "$STAGING_URL" > /dev/null 2>&1; then
            echo -e "   Status: ${GREEN}‚úÖ Accessible${NC}"
        else
            echo -e "   Status: ${RED}‚ùå Inaccessible${NC}"
        fi
    else
        echo "   Status: Aucun staging actif"
    fi
    
    echo ""
    echo "üì¶ DERNIERS D√âPLOIEMENTS:"
    firebase hosting:channel:list --project "$FIREBASE_PROJECT" | head -10
}

cleanup_staging() {
    echo -e "${BLUE}üßπ Nettoyage des environnements staging...${NC}"
    
    # Supprimer les fichiers locaux
    rm -f .staging-url .build-version
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
}

cleanup_old_channels() {
    echo -e "${BLUE}üßπ Nettoyage des anciens canaux...${NC}"
    
    # Cette fonction n√©cessiterait une logique plus complexe pour identifier et supprimer les anciens canaux
    firebase hosting:channel:list --project "$FIREBASE_PROJECT" --json | jq -r '.channels[] | select(.name | startswith("green-")) | .name' | head -5 | while read channel; do
        echo "üóëÔ∏è Suppression du canal: $channel"
        firebase hosting:channel:delete "$channel" --project "$FIREBASE_PROJECT" --force || true
    done
}

# Main script
case "$1" in
    "deploy")
        check_dependencies
        deploy_staging
        ;;
    "test")
        test_staging
        ;;
    "switch")
        switch_to_production
        ;;
    "rollback")
        rollback
        ;;
    "status")
        show_status
        ;;
    "cleanup")
        cleanup_old_channels
        ;;
    *)
        show_help
        ;;
esac
